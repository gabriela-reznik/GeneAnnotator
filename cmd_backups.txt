conda create -n GeneAnnotator python=3.8
conda activate GeneAnnotator

wget https://ftp.ensembl.org/pub/grch37/current/variation/vep/homo_sapiens_vep_109_GRCh37.tar.gz
wget https://ftp.ensembl.org/pub/grch37/release-109/variation/vep/homo_sapiens_vep_109_GRCh37.tar.gz
wget https://ftp.ensembl.org/pub/release-109/variation/indexed_vep_cache/homo_sapiens_vep_109_GRCh37.tar.gz


tar xzf homo_sapiens_vep_109_GRCh37.tar.gz && rm homo_sapiens_vep_109_GRCh37.tar.gz
wget https://ftp.ensembl.org/pub/grch37/release-109/fasta/homo_sapiens/dna/Homo_sapiens.GRCh37.dna.primary_assembly.fa.gz
gunzip

docker pull ensemblorg/ensembl-vep
docker pull ensemblorg/ensembl-vep:release_109.3

docker run -it -v ./vep_run:/data ensemblorg/ensembl-vep
docker run -it ensemblorg/ensembl-vep
docker run -it -v ./vep_run:/data 11f5f8f3f39f
docker run -it -v ./vep_run/vep_mount:/data -w /data/ 11f5f8f3f39f

perl INSTALL.pl
Cache files will be stored in /opt/vep/.vep


official
time vep -i NIST.vcf --assembly GRCh37 --fork 4 --cache --offline --dir_cache . --af --vcf --no_stats --fields AF,Gene,SYMBOL,Existing_variation,AF -o annotated_NIST.vcf 


time vep -i ../../../../data/NIST.vcf --assembly GRCh37 --fork 4 --cache --offline --dir_cache ../../../../data/ --fasta /genome/GRCh38.no_alt_analysis_set.fa.gz --af --vcf --no_stats --fields AF,Gene,SYMBOL,Existing_variation,AF -o ../../../../data/annotated_NIST.vcf 
docker run --rm -i -v ./vep_run/vep_mount:/data -w /data/ 11f5f8f3f39f vep -i NIST.vcf --assembly GRCh37 --fork 4 --cache --offline --dir_cache . --fasta Homo_sapiens.GRCh37.dna.primary_assembly.fa --af --vcf --no_stats --fields AF,Gene,SYMBOL,Existing_variation,AF -o test.vcf
docker run --rm -i -v ./vep_run/vep_mount:/data -w /data/ 11f5f8f3f39f vep -i NIST.vcf --assembly GRCh37 --cache --offline --dir_cache . --fasta Homo_sapiens.GRCh37.dna.primary_assembly.fa --af --vcf --no_stats --fields AF,Gene,SYMBOL,Existing_variation,AF -o test.vcf




docker run --rm -it -v ./vep_run/vep_mount:/data -w /data 11f5f8f3f39f


./vep -i examples/homo_sapiens_GRCh38.vcf --format vcf --tab --species homo_sapiens --cache --offline --force_overwrite --no_stats --check_existing --no_escape --everything --dir_cache /vep-cache --fasta /genome/GRCh38.no_alt_analysis_set.fa.gz --plugin SingleLetterAA -o last2.vcf

pip install flask-restful
pip install flask
pip install pandas

http://127.0.0.1:5000/getData?filter=DP&operation=bigger_than&value=0.5


conda install -n base -c conda-forge mamba
mamba install -c conda-forge -c bioconda snakemake

snakemake --dry-run parse_annotation
snakemake parse_annotation --cores 2




112
docker pull ensemblorg/ensembl-vep
wget https://ftp.ensembl.org/pub/grch37/release-112/variation/indexed_vep_cache/homo_sapiens_vep_112_GRCh37.tar.gz
tar -xzf vep_run/vep_mount/homo_sapiens_vep_112_GRCh37.tar.gz && rm vep_run/vep_mount/homo_sapiens_vep_112_GRCh37.tar.gz


1.
docker run --platform=linux/amd64 -it -v /Users/greznik@dnanexus.com/Documents/GitHub/GeneAnnotator/vep_run/vep_mount:/data ensemblorg/ensembl-vep
../src/ensembl-vep/vep -i NIST.vcf --assembly GRCh37 --fork 4 --cache --offline --dir_cache . --af --vcf --no_stats --fields AF,Gene,SYMBOL,Existing_variation,AF -o annotated_NIST.vcf
../src/ensembl-vep/vep -i /gene_annotator/NIST.vcf --assembly GRCh37 --fork 4 --cache --offline --dir_cache /gene_annotator/vep_cache/ --af --vcf --no_stats --fields AF,Gene,SYMBOL,Existing_variation,AF -o /gene_annotator/annotated_NIST.vcf

2. 
docker run --rm --platform=linux/amd64 -i -v /Users/greznik@dnanexus.com/Documents/GitHub/GeneAnnotator/vep_run/vep_mount:/data ensemblorg/ensembl-vep ../src/ensembl-vep/vep -i NIST.vcf --assembly GRCh37 --fork 4 --cache --offline --dir_cache . --af --vcf --no_stats --fields AF,Gene,SYMBOL,Existing_variation,AF -o annotated_NIST.vcf


make


docker save ensemblorg/ensembl-vep > vep_image.tar
DOCKER_BUILDKIT=1 docker build -t gene-annotator:latest .

docker build --platform=linux/amd64 -t gene-annotator:latest .


docker run --privileged --name gene-annotator -d gene-annotator
docker exec -it gene-annotator sh
docker run --rm -i  ensemblorg/ensembl-vep ../src/ensembl-vep/vep --help
exit
docker stop gene-annotator

docker run -it ensemblorg/ensembl-vep


#     prepare_cache = "tar -xzf gene_annotator/vep_mount/vep_cache/homo_sapiens_vep_112_GRCh37.tar.gz && rm homo_sapiens_vep_112_GRCh37.tar.gz gene_annotator/vep_mount/vep_cache"

docker exec -i gene-annotator 




" ../src/ensembl-vep/vep -i /gene_annotator/NIST.vcf --assembly GRCh37 --fork 4 --cache --offline --dir_cache /gene_annotator/vep_cache/ --af --vcf --no_stats --fields AF,Gene,SYMBOL,Existing_variation,AF -o /gene_annotator/annotated_NIST.vcf"


docker run -it -v .:/data gene-annotator
snakemake parse_annotation -s /gene_annotator/Snakefile 
snakemake all --dry-run -s /gene_annotator/Snakefile 
snakemake all -s /gene_annotator/Snakefile 
snakemake all -s gene_annotator/Snakefile 


ython3 annotator_parser/annotator_parser.py annotated_NIST.vcf parsed_annotation.csv 

cd gene_annotator 
docker run -it -v .:/data -w / gene-annotator
docker run -it -p 8000:8000 -v .:/data -w / gene-annotator

snakemake run_vep -s gene_annotator/Snakefile 
snakemake parse_annotation -s gene_annotator/Snakefile 
snakemake all -s gene_annotator/Snakefile 





docker run -it -v .:/gene_annotator gene-annotator
docker run -it gene-annotator


snakemake all -s gene_annotator/Snakefile 



    params: vep = ""
    shell: "../src/ensembl-vep/vep -i /gene_annotator/NIST.vcf --assembly GRCh37 --fork 4 --cache --offline --dir_cache /gene_annotator/vep_cache/ --af --vcf --no_stats --fields AF,Gene,SYMBOL,Existing_variation,AF -o /gene_annotator/annotated_NIST.vcf"




Minimum Requirements:

Linux or macOS environment (Zsh or Bash shell)
Docker
Git
21 GB of available disk space
Open port 8000 (verify by running: lsof -i :8000)


1. download git repository
2. build application (This will take several minutes)
cd git/build
docker build --platform=linux/amd64 -t gene-annotator:latest .

3. create a folder to get results and run docker detached with it mounted
mkdir results && cd results


(you can also run it interactively if you prefer by using 
docker run -it -p 8000:8000 -v .:/data -w / gene-annotator)

4. Run everything you need inside that docker

4.a) run snakemake 
snakemake all -s gene_annotator/Snakefile 

4.b) filter data
in case all runs well, you'll be able to query the output of the pipeline in your navigator by accessing
http://localhost:8000/?{you query}

query is expected to follow the model
        model = {
            "filter_by": {"DP", "AF_1000_genomes"},
            "operation": {"bigger_than", "smaller_than", "equal"},
            "value": "float",
        }

This means you can filter data by "DP" or "AF_1000_genomes", choose between operations "bigger_than", "smaller_than" or "equal" and provide a numerical value for the filtering.

the parsed url should look like:
http://localhost:8000/getData?filter_by=AF_1000_genomes&operation=equal&value=0.5

You'll be able to see the filtered data in your terminal and in the navigator. Optional files are also available.

You can now close

6. Optional - exporting filtered data and intermediate files
Move your files to mounted folder by running
mv gene_annotator/NIST.vcf gene_annotator/annotated_NIST.vcf gene_annotator/parsed_annotation.csv gene_annotator/csv_filtered_data.csv gene_annotator/filtered_data_dict.json getData

all files should be now in your local machine results/ directory

7. stop and remove container